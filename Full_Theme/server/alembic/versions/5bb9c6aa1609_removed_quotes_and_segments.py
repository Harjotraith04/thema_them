"""Removed quotes and segments

Revision ID: 5bb9c6aa1609
Revises: 27e4efaa2d3b
Create Date: 2025-06-17 17:53:07.898960

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5bb9c6aa1609'
down_revision: Union[str, None] = '27e4efaa2d3b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('code_assignments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('document_id', sa.Integer(), nullable=False),
    sa.Column('code_id', sa.Integer(), nullable=False),
    sa.Column('start_char', sa.Integer(), nullable=False),
    sa.Column('end_char', sa.Integer(), nullable=False),
    sa.Column('text_snapshot', sa.Text(), nullable=True),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('created_by_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['code_id'], ['codes.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_code_assignments_id'), 'code_assignments', ['id'], unique=False)
    op.drop_table('segment_codes')
    op.drop_table('quote_codes')
    op.drop_index('ix_quotes_id', table_name='quotes')
    op.drop_table('quotes')
    op.drop_index('ix_document_segments_id', table_name='document_segments')
    op.drop_table('document_segments')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('document_segments',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('document_segments_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('segment_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('line_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('page_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('paragraph_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('row_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('character_start', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('character_end', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('additional_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='document_segments_document_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='document_segments_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_document_segments_id', 'document_segments', ['id'], unique=False)
    op.create_table('quotes',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('quotes_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('start_char', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('end_char', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('segment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_by_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], name='quotes_created_by_id_fkey'),
    sa.ForeignKeyConstraint(['document_id'], ['documents.id'], name='quotes_document_id_fkey'),
    sa.ForeignKeyConstraint(['segment_id'], ['document_segments.id'], name='quotes_segment_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='quotes_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_quotes_id', 'quotes', ['id'], unique=False)
    op.create_table('quote_codes',
    sa.Column('quote_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('code_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['code_id'], ['codes.id'], name='quote_codes_code_id_fkey'),
    sa.ForeignKeyConstraint(['quote_id'], ['quotes.id'], name='quote_codes_quote_id_fkey'),
    sa.PrimaryKeyConstraint('quote_id', 'code_id', name='quote_codes_pkey')
    )
    op.create_table('segment_codes',
    sa.Column('segment_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('code_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['code_id'], ['codes.id'], name='segment_codes_code_id_fkey'),
    sa.ForeignKeyConstraint(['segment_id'], ['document_segments.id'], name='segment_codes_segment_id_fkey'),
    sa.PrimaryKeyConstraint('segment_id', 'code_id', name='segment_codes_pkey')
    )
    op.drop_index(op.f('ix_code_assignments_id'), table_name='code_assignments')
    op.drop_table('code_assignments')
    # ### end Alembic commands ###
